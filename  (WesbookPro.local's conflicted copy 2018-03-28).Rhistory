# load some libs
library(ggplot2)
library(reshape2)
library(RColorBrewer)
library(stringr)
# load the data
csvfiles = list.files(path = "All AGE 10 series counts-03232018/Counts", full.names = TRUE)
raw = do.call("rbind", lapply(csvfiles, FUN = function(file) read.csv(file, header = TRUE, sep = ",")))
csvfiles = list.files(path = "All AGE 10 series counts-03232018/Counts", full.names = TRUE)
csvfiles
csvfiles = list.files(path = "All AGE 10 series counts-03232018/Counts", full.names = TRUE)
raw = do.call("rbind", lapply(csvfiles, FUN = function(file) read.csv(file, header = TRUE, sep = ",")))
csvfiles
csvfiles = list.files(path = "All AGE 10 series counts-03232018/Counts", full.names = TRUE)
csvfiles = list.files(path = "All AGE 10 series counts-03232018/Counts", full.names = TRUE)
csvfiles
# load the data
csvfiles = list.files(path = "All AGE 10 series counts-03232018/Counts", full.names = TRUE)
raw = do.call("rbind", lapply(csvfiles, FUN = function(file) read.csv(file, header = TRUE, sep = ",")))
csvfiles
# load the data
csvfiles = list.files(path = "All AGE 10 series counts-03232018/Counts", full.names = TRUE)
raw = do.call("rbind", lapply(csvfiles, FUN = function(file) read.csv(file, header = TRUE, sep = ",")))
# load some libs
library(ggplot2)
library(reshape2)
library(RColorBrewer)
library(stringr)
# load the data
csvfiles = list.files(path = "All AGE 10 series counts-03232018/Counts", full.names = TRUE)
raw = do.call("rbind", lapply(csvfiles, FUN = function(file) read.csv(file, header = TRUE, sep = ",")))
# make the column names easier to read by removing the 'X.'
colnames(raw) <- gsub('X.', '', colnames(raw), fixed = TRUE)
source('~/R/AGE11-validation1/Main1.R', echo=TRUE)
source('~/R/AGE11-validation1/Main1.R', echo=TRUE)
source('~/R/AGE11-validation1/Main1.R', echo=TRUE)
# load some libs
library(ggplot2)
library(reshape2)
library(RColorBrewer)
library(stringr)
# load the data
csvfiles = list.files(path = "All AGE 10 series counts-03232018/Counts", full.names = TRUE)
raw = do.call("rbind", lapply(csvfiles, FUN = function(file) read.csv(file, header = TRUE, sep = ",")))
# load the data
csvfiles = list.files(path = "All AGE 10 series counts-03232018/Counts", full.names = TRUE)
raw = do.call("rbind", lapply(csvfiles, FUN = function(file) read.csv(file, header = TRUE, sep = ",")))
# load the data
csvfiles = list.files(path = "All AGE 10 series counts-03232018/Counts", full.names = TRUE)
raw = do.call("rbind", lapply(csvfiles, FUN = function(file) read.csv(file, header = TRUE, sep = ",")))
# load the data
csvfiles = list.files(path = "All AGE 10 series counts-03232018/Counts", full.names = TRUE)
raw = do.call("rbind", lapply(csvfiles, FUN = function(file) read.csv(file, header = TRUE, sep = ",")))
csvfiles = list.files(path = "All AGE 10 series counts-03232018/Counts", full.names = TRUE)
raw = do.call("rbind", lapply(csvfiles, FUN = function(file) read.csv(file, header = TRUE, sep = ",")))
# load the data
csvfiles = list.files(path = "All AGE 10 series counts-03232018/Counts", full.names = TRUE)
raw = do.call("rbind", lapply(csvfiles, FUN = function(file) read.csv(file, header = TRUE, sep = ",")))
# load the data
csvfiles = list.files(path = "All AGE 10 series counts-03232018/Counts/", full.names = TRUE)
raw = do.call("rbind", lapply(csvfiles, FUN = function(file) read.csv(file, header = TRUE, sep = ",")))
csvfiles
csvfiles = list.files(path = "All AGE 10 series counts-03232018/Counts/", full.names = TRUE)
raw = do.call("rbind", lapply(csvfiles, FUN = function(file) read.csv(file, header = TRUE, sep = ",")))
# load the data
csvfiles = list.files(path = "All AGE 10 series counts-03232018/Counts11/", full.names = TRUE)
raw = do.call("rbind", lapply(csvfiles, FUN = function(file) read.csv(file, header = TRUE, sep = ",")))
csvfiles = list.files(path = "All AGE 10 series counts-03232018/Counts10/", full.names = TRUE)
raw = do.call("rbind", lapply(csvfiles, FUN = function(file) read.csv(file, header = TRUE, sep = ",")))
csvfiles = list.files(path = "All AGE 10 series counts-03232018/Counts10/", full.names = TRUE)
raw = do.call("rbind", lapply(csvfiles, FUN = function(file) read.csv(file, header = TRUE, sep = ",")))
csvfiles = list.files(path = "All AGE 10 series counts-03232018/Counts10b/", full.names = TRUE)
raw = do.call("rbind", lapply(csvfiles, FUN = function(file) read.csv(file, header = TRUE, sep = ",")))
csvfiles = list.files(path = "All AGE 10 series counts-03232018/Counts11/", full.names = TRUE)
raw = do.call("rbind", lapply(csvfiles, FUN = function(file) read.csv(file, header = TRUE, sep = ",")))
?list.files
csvfiles = list.files(path = "All AGE 10 series counts-03232018/Counts11/", full.names = FALSE)
raw = do.call("rbind", lapply(csvfiles, FUN = function(file) read.csv(file, header = TRUE, sep = ",")))
csvfiles = list.files(path = "All AGE 10 series counts-03232018/Counts11/", full.names = TRUE)
raw = do.call("rbind", lapply(csvfiles, FUN = function(file) read.csv(file, header = TRUE, sep = ",")))
csvfiles = list.files(path = "All AGE 10 series counts-03232018/Counts10/", full.names = TRUE)
raw = do.call("rbind", lapply(csvfiles, FUN = function(file) read.csv(file, header = TRUE, sep = ",")))
csvfiles = list.files(path = "All AGE 10 series counts-03232018/Counts10B/", full.names = TRUE)
raw = do.call("rbind", lapply(csvfiles, FUN = function(file) read.csv(file, header = TRUE, sep = ",")))
csvfiles = list.files(path = "All AGE 10 series counts-03232018/Counts11/", full.names = TRUE)
raw = do.call("rbind", lapply(csvfiles, FUN = function(file) read.csv(file, header = TRUE, sep = ",")))
# load some libs
library(ggplot2)
library(reshape2)
library(RColorBrewer)
library(stringr)
library(dpylr)
# load the data
csvfiles = list.files(path = "All AGE 10 series counts-03232018/Counts11/", full.names = TRUE)
raw = do.call("rbind", lapply(csvfiles, FUN = function(file) read.csv(file, header = TRUE, sep = ",")))
csvfiles = list.files(path = "All AGE 10 series counts-03232018/Counts10B/", full.names = TRUE)
raw = do.call("rbind", lapply(csvfiles, FUN = function(file) read.csv(file, header = TRUE, sep = ",")))
detatch(dpylr)
detach(dpylr)
csvfiles = list.files(path = "All AGE 10 series counts-03232018/Counts10/", full.names = TRUE)
raw = do.call("rbind", lapply(csvfiles, FUN = function(file) read.csv(file, header = TRUE, sep = ",")))
csvfiles = list.files(path = "All AGE 10 series counts-03232018/Counts10b/", full.names = TRUE)
raw = do.call("rbind", lapply(csvfiles, FUN = function(file) read.csv(file, header = TRUE, sep = ",")))
csvfiles = list.files(path = "All AGE 10 series counts-03232018/Counts10b/", full.names = TRUE)
raw = do.call("rbind", lapply(csvfiles, FUN = function(file) read.csv(file, header = TRUE, sep = ",")))
# make the column names easier to read by removing the 'X.'
csvfiles = list.files(path = "All AGE 10 series counts-03232018/CombinedCounts/", full.names = TRUE)
raw = do.call("rbind", lapply(csvfiles, FUN = function(file) read.csv(file, header = TRUE, sep = ",")))
# make the column names easier to read by removing the 'X.'
colnames(raw) <- gsub('X.', '', colnames(raw), fixed = TRUE)
# Change Mouse ID to a factor, not a numeric
raw$Mouse.ID. = as.factor(raw$Mouse.ID.)
# Merge in animal details
animal_details = read.csv("animal_details.csv")
animal_details$Mouse.ID. = as.factor(animal_details$ID)
raw = merge(animal_details, raw, by = "Mouse.ID.")
# Convert time (hh:mm) to minutes
raw$DELTA.T = sapply(strsplit(as.character(raw$DELTA.T), ":"), function(x)
{
x = as.numeric(x)
x[1] * 60 + x[2]
}
)
# show the number of different values per ROI variables
factor(levels(raw$System.)) # 17
factor(levels(raw$Major.ROI.)) # 69
factor(levels(raw$Sub.ROI)) # 82
# Useful plotting shortcuts
rx = theme(axis.text.x = element_text(angle = 90, hjust = 1))
# KK's usual file naming pattern is:
# seq _ z _ bregma _ animal _ flags .tif
# So find num_num_num_num_ with optional '-' for negative bregma
root_pat = "^[:digit:]{1,3}_[:digit:]{1,3}_[-]?.{1,3}_[:xdigit:]{1,4}_"
# Load in the image metadata and clean it
exfiles = list.files(path = "Rotations or Exclusions - From Manual Validations", full.names = TRUE)
ex = do.call("rbind", lapply(exfiles, FUN = function(file) read.csv(file, header = TRUE, sep = ",")))
exfiles = list.files(path = "All AGE 10 series counts-03232018/Rotations or Exclusions - From Manual Validations", full.names = TRUE)
ex = do.call("rbind", lapply(exfiles, FUN = function(file) read.csv(file, header = TRUE, sep = ",")))
exfiles
# Clean the 'ex' dataframe
clean_shellshit = function(string, pattern)
{
new = str_extract(string, pattern)
string = new
}
pat_shell = "[:digit:]{1,4}"
ex$Width = mapply(clean_shellshit, string = ex$Width, pattern = pat_shell)
ex$Height = mapply(clean_shellshit, string = ex$Height, pattern = pat_shell)
ex$Width = as.numeric(ex$Width)
ex$Height = as.numeric(ex$Height)
# Flag the excluded files in the RAW dataframe
# 1) Work on each filename in the RAW
# 2) Compare root names with exclusion list
# 3) If same, then label every observation under that file to be excluded
for (filename in levels(factor(raw$File.Name.)))
{
a1 = str_extract(filename, root_pat)
a2 = str_extract(ex$Name[ex$Width < ex$Height], root_pat) # list of portrait images (bad)
if (any(a1 %in% a2)) # if it's a bad image
{
raw$is_excluded[raw$File.Name. == filename] = TRUE # then flag exclude TRUE
} else raw$is_excluded[raw$File.Name. == filename] = FALSE
}
count(raw$File.Name.)
raw$File.Name.
raw$File.Name.[raw$is_excluded==TRUE,]
raw$File.Name.[is_excluded==TRUE,]
raw$File.Name.[is_excluded=='TRUE',]
raw$File.Name.[raw$is_excluded=='TRUE',]
raw$is_excluded
count(raw$is_excluded)
library(dpylr)
library(pylr)
library(plyr
)
count(raw$is_excluded)
count(raw$is_excluded[raw$is_excluded==TRUE])
count(raw$is_excluded[raw$is_excluded==TRUE]) *4
count(raw$is_excluded[raw$is_excluded==TRUE]) /count(raw$is_excluded])
count(raw$is_excluded[raw$is_excluded==TRUE]) /count(raw$is_excluded)
# Source the script to define the channel sets
raw = raw_revised  # SEE THIS
# Source the script to define the channel sets
source("DefineChannelSets.R")
# This defines the channel sets
# define all the sets of channels as a list of variables
# 5 groups total: mean, lowSD, midSD, hiSD, and total
channels_mean = list(
dapimean = raw$Ch1.Mean.,
gfpmean = raw$Ch2.Mean.,
gfapmean = raw$Ch3.Mean.,
arcmean = raw$Ch4.Mean.)
channels_lowSD = list(
dapilow = raw$Ch1..m.0.5sd.,
gfplow = raw$Ch2..m.0.5sd.,
gfaplow = raw$Ch3..m.0.5sd.,
arclow = raw$Ch4..m.0.5sd.,
ollow = raw$OL..m.0.5sd.)
channels_midSD = list(
dapimid = raw$Ch1..m.0.5sd...m.0.5sd..,
gfpmid = raw$Ch2..m.0.5sd...m.0.5sd..,
gfapmid = raw$Ch3..m.0.5sd...m.0.5sd..,
arcmid = raw$Ch4..m.0.5sd...m.0.5sd..,
olmid = raw$OL..m.0.5sd...m.0.5sd..)
channels_hiSD = list(
dapihi = raw$Ch1..m.0.5sd..1,
gfphi = raw$Ch2..m.0.5sd..1,
gfaphi = raw$Ch3..m.0.5sd..1,
archi = raw$Ch4..m.0.5sd..1,
olhi = raw$OL..m.0.5sd..1)
channels_total = list(
dapitot = raw$Ch1.Total.,
gfptot = raw$Ch2.Total.,
gfaptot = raw$Ch3.Total.,
arctot = raw$Ch4.Total.,
oltot = raw$OL.Total.)
# Which areas in each animals have the most counts?
# define function to get heatmap
# accepts channel list as argument, then x axis, then y axis factors
heat_set = function(ch, x1, y1) {
names = names(ch) # get all names to a list
j = 1 # init
for (counts in ch) {
title = names[j]
j = j + 1
print(
ggplot(
raw, aes(y = y1, x = x1)) + geom_tile(aes(fill = counts)) +
scale_fill_gradientn(colours = hm.palette(100)) +
labs(title = title) +rx
)
}
}
heat_set(channels_mean, raw$Mouse.ID., raw$System.)
# load some libs
library(ggplot2)
library(reshape2)
library(RColorBrewer)
library(stringr)
heat_set(channels_mean, raw$Mouse.ID., raw$System.)
# define function to get heatmap
# accepts channel list as argument, then x axis, then y axis factors
heat_set = function(ch, x1, y1) {
names = names(ch) # get all names to a list
j = 1 # init
for (counts in ch) {
title = names[j]
j = j + 1
print(
ggplot(
raw, aes(y = y1, x = x1)) + geom_tile(aes(fill = counts)) +
labs(title = title) +rx
)
}
}
heat_set(channels_mean, raw$Mouse.ID., raw$System.)
heat_set(channels_mean, raw$EXPT, raw$System.)
View(raw)
View(raw)
heat_set(channels_mean, raw$EXPT, raw$System.)
library(ggplot2)
library(reshape2)
library(RColorBrewer)
library(stringr)
heat_set(channels_mean, raw$EXPT, raw$System.)
heat_set(channels_mean, raw$EXPT, raw$Bregma.)
attach(raw)
ggplot(raw, Ch1.Mean., EXPT)
ggplot(raw, aes(Ch1.Mean., EXPT)
)
ggplot(raw, aes(EXPT, Ch1.Mean.)) + geom_boxplot()
ggplot(raw, aes(EXPT, Ch1.Mean.)) + geom_bar(stat="identity")
ggplot(raw, aes(EXPT, Ch2.Mean.)) + geom_bar(stat="identity")
ggplot(raw, aes(EXPT, Ch3.Mean.)) + geom_bar(stat="identity")
ggplot(raw, aes(EXPT, Ch3.Mean.)) + geom_bar(stat="identity") +geom_errorbar()
ggplot(raw, aes(EXPT, Ch3.Mean.)) + geom_bar(stat="identity") +geom_errorbarh()
ggplot(raw, aes(EXPT, Ch3.Mean.)) + geom_jitter()
heat_set(channels_mean, raw$Mouse.ID., raw$System.)
# This defines the channel sets
# define all the sets of channels as a list of variables
# 5 groups total: mean, lowSD, midSD, hiSD, and total
channels_mean = list(
dapimean = raw$Ch1.Mean.,
gfpmean = raw$Ch2.Mean.,
gfapmean = raw$Ch3.Mean.,
arcmean = raw$Ch4.Mean.)
channels_lowSD = list(
dapilow = raw$Ch1..m.0.5sd.,
gfplow = raw$Ch2..m.0.5sd.,
gfaplow = raw$Ch3..m.0.5sd.,
arclow = raw$Ch4..m.0.5sd.,
ollow = raw$OL..m.0.5sd.)
channels_midSD = list(
dapimid = raw$Ch1..m.0.5sd...m.0.5sd..,
gfpmid = raw$Ch2..m.0.5sd...m.0.5sd..,
gfapmid = raw$Ch3..m.0.5sd...m.0.5sd..,
arcmid = raw$Ch4..m.0.5sd...m.0.5sd..,
olmid = raw$OL..m.0.5sd...m.0.5sd..)
channels_hiSD = list(
dapihi = raw$Ch1..m.0.5sd..1,
gfphi = raw$Ch2..m.0.5sd..1,
gfaphi = raw$Ch3..m.0.5sd..1,
archi = raw$Ch4..m.0.5sd..1,
olhi = raw$OL..m.0.5sd..1)
channels_total = list(
dapitot = raw$Ch1.Total.,
gfptot = raw$Ch2.Total.,
gfaptot = raw$Ch3.Total.,
arctot = raw$Ch4.Total.,
oltot = raw$OL.Total.)
# Which areas in each animals have the most counts?
# define function to get heatmap
# accepts channel list as argument, then x axis, then y axis factors
heat_set = function(ch, x1, y1) {
names = names(ch) # get all names to a list
j = 1 # init
for (counts in ch) {
title = names[j]
j = j + 1
print(
ggplot(raw, aes(y = y1, x = x1)) + geom_tile(aes(fill = counts)) +
labs(title = title) +rx
)
}
}
heat_set(channels_mean, raw$Mouse.ID., raw$System.)
library(ggplot2)
heat_set(channels_mean, raw$Mouse.ID., raw$System.)
plot(raw$Ch1.Mean.)
mean(raw$Ch4.Mean.)
names(raw[1,])
names(raw[,14:53])
for (each in raw[,14:53]) {
as.numeric(each)
}
raw[,14:53]
raw2 = lapply(raw[,14:53], function(x) as.numeric(x))
raw2 = data.frame(lapply(raw[,14:53], function(x) as.numeric(x)))
lapply(raw[,14:53], function(x) as.numeric(x))
raw = lapply(raw[,14:53], function(x) as.numeric(x))
colnames(raw[,14:53])
colnames(raw[14:53])
for (each in raw[,14:53]) {
raw$each = as.numeric(raw$each)
}
for (each in raw[14:53]) {
raw$each = as.numeric(raw$each)
}
raw[1]
# load some libs
library(ggplot2)
library(reshape2)
library(RColorBrewer)
library(stringr)
library(plyr)
# load the data
csvfiles = list.files(path = "All AGE 10 series counts-03232018/CombinedCounts/", full.names = TRUE)
raw = do.call("rbind", lapply(csvfiles, FUN = function(file) read.csv(file, header = TRUE, sep = ",")))
# make the column names easier to read by removing the 'X.'
colnames(raw) <- gsub('X.', '', colnames(raw), fixed = TRUE)
# Change Mouse ID to a factor, not a numeric
raw$Mouse.ID. = as.factor(raw$Mouse.ID.)
# change everything else to numeric
for (each in raw[14:53]) {
raw$each = as.numeric(raw$each)
}
# Merge in animal details
animal_details = read.csv("animal_details.csv")
animal_details$Mouse.ID. = as.factor(animal_details$ID)
raw = merge(animal_details, raw, by = "Mouse.ID.")
# Convert time (hh:mm) to minutes
raw$DELTA.T = sapply(strsplit(as.character(raw$DELTA.T), ":"), function(x)
{
x = as.numeric(x)
x[1] * 60 + x[2]
}
)
# show the number of different values per ROI variables
factor(levels(raw$System.)) # 17
factor(levels(raw$Major.ROI.)) # 69
factor(levels(raw$Sub.ROI)) # 82
# Useful plotting shortcuts
rx = theme(axis.text.x = element_text(angle = 90, hjust = 1))
nrow(raw)
# load some libs
library(ggplot2)
library(reshape2)
library(RColorBrewer)
library(stringr)
library(plyr)
# load the data
csvfiles = list.files(path = "All AGE 10 series counts-03232018/CombinedCounts/", full.names = TRUE)
raw = do.call("rbind", lapply(csvfiles, FUN = function(file) read.csv(file, header = TRUE, sep = ",")))
raw2=raw
lapply(raw2[14:53], function(x) as.numeric(x))
lapply(raw2[14:53], function(x) raw[[x]] = as.numeric(x))
lapply(raw2[14:53], function(x) raw[x] = as.numeric(x))
lapply(raw2[14:53], function(x) x = as.numeric(x))
raw2 = lapply(raw2, function(x) {
if x = raw[1:13] {
raw2 = lapply(raw2, function(x) {
if (x = raw[1:13]) {
raw2 = lapply(raw2, function(x) {
if (x == raw[1:13]) {
} else {as.numeric(x)}
}
)
for (i in 15:53) {
raw2[,i] = as.numeric(as.character(raw2[,i]))
}
for (i in 15:53) {
raw[,i] = as.numeric(as.character(raw2[,i]))
}
# show the number of different values per ROI variables
factor(levels(raw$System.)) # 17
factor(levels(raw$Major.ROI.)) # 69
factor(levels(raw$Sub.ROI)) # 82
# Useful plotting shortcuts
rx = theme(axis.text.x = element_text(angle = 90, hjust = 1))
nrow(raw)
names(raw)
# load some libs
library(ggplot2)
library(reshape2)
library(RColorBrewer)
library(stringr)
library(plyr)
# load the data
csvfiles = list.files(path = "All AGE 10 series counts-03232018/CombinedCounts/", full.names = TRUE)
raw = do.call("rbind", lapply(csvfiles, FUN = function(file) read.csv(file, header = TRUE, sep = ",")))
# make the column names easier to read by removing the 'X.'
colnames(raw) <- gsub('X.', '', colnames(raw), fixed = TRUE)
# Change Mouse ID to a factor, not a numeric
raw$Mouse.ID. = as.factor(raw$Mouse.ID.)
# change everything else to numeric
for (i in c(15:29, 33:53) {
for (i in c(15:29, 33:53)) {
raw[,i] = as.numeric(as.character(raw2[,i]))
}
# Merge in animal details
animal_details = read.csv("animal_details.csv")
animal_details$Mouse.ID. = as.factor(animal_details$ID)
raw = merge(animal_details, raw, by = "Mouse.ID.")
# change everything else to numeric
for (i in c(15:29, 33:53)) {
raw[,i] = as.numeric(as.character(raw2[,i]))
}
# Convert time (hh:mm) to minutes
raw$DELTA.T = sapply(strsplit(as.character(raw$DELTA.T), ":"), function(x)
{
x = as.numeric(x)
x[1] * 60 + x[2]
}
)
# show the number of different values per ROI variables
factor(levels(raw$System.)) # 17
factor(levels(raw$Major.ROI.)) # 69
factor(levels(raw$Sub.ROI)) # 82
# Useful plotting shortcuts
rx = theme(axis.text.x = element_text(angle = 90, hjust = 1))
nrow(raw)
# KK's usual file naming pattern is:
# seq _ z _ bregma _ animal _ flags .tif
# So find num_num_num_num_ with optional '-' for negative bregma
root_pat = "^[:digit:]{1,3}_[:digit:]{1,3}_[-]?.{1,3}_[:xdigit:]{1,4}_"
# Load in the image metadata and clean it
exfiles = list.files(path = "All AGE 10 series counts-03232018/Rotations or Exclusions - From Manual Validations", full.names = TRUE)
ex = do.call("rbind", lapply(exfiles, FUN = function(file) read.csv(file, header = TRUE, sep = ",")))
# Clean the 'ex' dataframe
clean_shellshit = function(string, pattern)
{
new = str_extract(string, pattern)
string = new
}
pat_shell = "[:digit:]{1,4}"
ex$Width = mapply(clean_shellshit, string = ex$Width, pattern = pat_shell)
ex$Height = mapply(clean_shellshit, string = ex$Height, pattern = pat_shell)
ex$Width = as.numeric(ex$Width)
ex$Height = as.numeric(ex$Height)
# Flag the excluded files in the RAW dataframe
# 1) Work on each filename in the RAW
# 2) Compare root names with exclusion list
# 3) If same, then label every observation under that file to be excluded
for (filename in levels(factor(raw$File.Name.)))
{
a1 = str_extract(filename, root_pat)
a2 = str_extract(ex$Name[ex$Width < ex$Height], root_pat) # list of portrait images (bad)
if (any(a1 %in% a2)) # if it's a bad image
{
raw$is_excluded[raw$File.Name. == filename] = TRUE # then flag exclude TRUE
} else raw$is_excluded[raw$File.Name. == filename] = FALSE
}
# Find the percent excluded
count(raw$is_excluded)
