stat_summary(fun.y = "mean", geom="point") +
stat_summary(fun.data = "mean_se", geom="errorbar", aes(width=0.2)) +
facet_wrap(CHANNEL~System, scales="free", ncol=4) +
ggtitle("systems, weighted, density total cells, bad freezers NOT removed") +
theme_light() + rx + coord_flip()
knew.molten2 %>%
filter(CHANNEL %in% channel.list[c(2)]) %>%
filter(UNITS == "density" & BRIGHTNESS == 'total') %>%
# filter(!(EXPT =='YOUNG' & CONTEXT=='AA' & VALENCE == 'SHOCK' & FREEZE < 30)) %>% # removes young bad freezers
group_by(ID, System, VALENCE, EXPT, CHANNEL, variable) %>%
summarize(weighted = weighted.mean(value, Pop_roiAreaMM2)) %>%
ggplot() + aes(VALENCE, weighted, color=EXPT, fill=EXPT) +
stat_summary(fun.y = "mean", geom="point") +
stat_summary(fun.data = "mean_se", geom="errorbar", aes(width=0.2)) +
facet_wrap(CHANNEL~System, scales="free", ncol=4) +
ggtitle("systems, weighted, density total cells, bad freezers NOT removed") +
theme_minimal() + rx + coord_flip()
knew.molten2 %>%
filter(CHANNEL %in% channel.list[c(2)]) %>%
filter(UNITS == "density" & BRIGHTNESS == 'total') %>%
# filter(!(EXPT =='YOUNG' & CONTEXT=='AA' & VALENCE == 'SHOCK' & FREEZE < 30)) %>% # removes young bad freezers
group_by(ID, System, VALENCE, EXPT, CHANNEL, variable) %>%
summarize(weighted = weighted.mean(value, Pop_roiAreaMM2)) %>%
ggplot() + aes(VALENCE, weighted, color=EXPT, fill=EXPT) +
stat_summary(fun.y = "mean", geom="point") +
stat_summary(fun.data = "mean_se", geom="errorbar", aes(width=0.2)) +
facet_wrap(~System, scales="free", ncol=4) +
ggtitle("systems, weighted, density total cells, bad freezers NOT removed") +
theme_minimal() + rx + coord_flip()
knew.molten2 %>%
filter(CHANNEL %in% channel.list[c(2)]) %>%
filter(UNITS == "density" & BRIGHTNESS == 'total') %>%
# filter(!(EXPT =='YOUNG' & CONTEXT=='AA' & VALENCE == 'SHOCK' & FREEZE < 30)) %>% # removes young bad freezers
group_by(ID, System, VALENCE, EXPT, CHANNEL, variable) %>%
summarize(weighted = weighted.mean(value, Pop_roiAreaMM2)) %>%
ggplot() + aes(VALENCE, weighted, color=EXPT, fill=EXPT) +
stat_summary(fun.y = "mean", geom="point") +
stat_summary(fun.data = "mean_se", geom="errorbar", aes(width=0.2)) +
facet_wrap(~System, scales="free", ncol=4) +
ggtitle("systems, weighted, density total cells, bad freezers NOT removed") +
theme_minimal() + rx
knew.molten2 %>%
filter(CHANNEL %in% channel.list[c(2)]) %>%
filter(UNITS == "density" & BRIGHTNESS == 'total') %>%
# filter(!(EXPT =='YOUNG' & CONTEXT=='AA' & VALENCE == 'SHOCK' & FREEZE < 30)) %>% # removes young bad freezers
group_by(ID, System, VALENCE, EXPT, CHANNEL, variable) %>%
summarize(weighted = weighted.mean(value, Pop_roiAreaMM2)) %>%
ggplot() + aes(VALENCE, weighted, color=EXPT, fill=EXPT) +
stat_summary(fun.y = "mean", geom="point") +
stat_summary(fun.data = "mean_se", geom="errorbar", aes(width=0.2)) +
facet_wrap(~System, scales="free", ncol=8) +
ggtitle("systems, weighted, density total cells, bad freezers NOT removed") +
theme_minimal() + rx
ss2 %>% filter(p.value < 0.01) %>%
ddply(., .(term, CHANNEL), summarize, count = n())
# create weighted means for the system
ss1 = knew.molten3 %>%
ddply(., .(CHANNEL, GROUP, EXPT, VALENCE, CONTEXT, ID, System), summarize,
wm = weighted.mean(value, Pop_roiAreaMM2))
# do the ANOVA
ss2 = ss1 %>%
group_by(CHANNEL, System) %>%
do(tidy(aov(data=., wm ~ EXPT * VALENCE * CONTEXT)))
# how many significant systems?
ss2 %>% filter(p.value < 0.01) %>%
ddply(., .(term, CHANNEL), summarize, count = n())
# make graphs
for (tm in unique(ss2$term)) {
print(
ss2 %>%
filter(term==tm) %>%
filter(!(term=='Residuals')) %>%
mutate(p.value = p.adjust(p.value, method="BH", n = 16)) %>%
ggplot() + aes(reorder(System, p.value), -log10(p.value), label=p.value, fill=System) +
geom_bar(stat="identity") +
coord_flip() + theme_light() + rx +
ggtitle(paste(ch, ",", tm, "(3-way ANOVA)")) +
ylab("p-value 10^-x, Benjamini-Hochberg post-hoc for n=16 systems") +
xlab("System") +
facet_wrap(~CHANNEL, ncol=3, scales="free") +
geom_hline(yintercept = 2)
)
}
# create weighted means for the system
ss1 = knew.molten3 %>%
ddply(., .(CHANNEL, GROUP, EXPT, VALENCE, CONTEXT, ID, System), summarize,
wm = weighted.mean(value, Pop_roiAreaMM2))
# do the ANOVA
ss2 = ss1 %>%
group_by(CHANNEL, System) %>%
do(tidy(aov(data=., wm ~ EXPT * VALENCE * CONTEXT)))
# how many significant systems?
ss2 %>% filter(p.value < 0.01) %>%
ddply(., .(term, CHANNEL), summarize, count = n())
# make graphs
for (tm in unique(ss2$term)) {
print(
ss2 %>%
filter(term==tm) %>%
filter(!(term=='Residuals')) %>%
mutate(p.value = p.adjust(p.value, method="BH", n = 16)) %>%
ggplot() + aes(reorder(System, p.value), -log10(p.value), label=p.value, fill=System) +
geom_bar(stat="identity") +
coord_flip() + theme_light() + rx +
ggtitle(paste(tm, "3-way ANOVA")) +
ylab("p-value 10^-x, Benjamini-Hochberg post-hoc for n=16 systems") +
xlab("System") +
facet_wrap(~CHANNEL, ncol=3, scales="free") +
geom_hline(yintercept = 2)
)
}
ss2 %>% filter(p.value < 0.01) %>%
ddply(., .(term, CHANNEL), summarize, count = n(), system = System)
ss2 %>% filter(p.value < 0.01) %>%
ddply(., .(term, CHANNEL), summarize, count = n())
ss2 %>% filter(p.value < 0.01) %>%
ddply(., .(term, CHANNEL), summarize, count = n()) %>%
reorder(count)
ss2 %>% filter(p.value < 0.01) %>%
ddply(., .(term, CHANNEL), summarize, count = n()) %>%
reorder_by(count)
ss2 %>% filter(p.value < 0.01) %>%
ddply(., .(term, CHANNEL), summarize, count = n()) %>%
order_by(count)
ss2 %>% filter(p.value < 0.01) %>%
ddply(., .(term, CHANNEL), summarize, count = n()) %>%
do(order_by(count))
ss2 %>% filter(p.value < 0.01) %>%
ddply(., .(term, CHANNEL), summarize, count = n())
# create weighted means for the system
ss1 = knew.molten3 %>%
ddply(., .(CHANNEL, GROUP, EXPT, VALENCE, CONTEXT, ID, System), summarize,
wm = weighted.mean(value, Pop_roiAreaMM2))
# do the ANOVA
ss2 = ss1 %>%
group_by(CHANNEL, System) %>%
do(tidy(aov(data=., wm ~ EXPT * VALENCE * CONTEXT)))
# how many significant systems?
ss2 %>% filter(p.value < 0.01) %>%
ddply(., .(term, CHANNEL), summarize, count = n())
# make graphs
for (tm in unique(ss2$term)) {
print(
ss2 %>%
filter(term==tm) %>%
filter(!(term=='Residuals')) %>%
mutate(p.value = p.adjust(p.value, method="BH", n = 16)) %>%
ggplot() + aes(reorder(System, p.value), -log10(p.value), label=p.value, fill=System) +
geom_bar(stat="identity") +
coord_flip() + theme_light() + rx +
ggtitle(paste(tm, "3-way ANOVA")) +
ylab("p-value 10^-x, Benjamini-Hochberg post-hoc for n=16 systems") +
xlab("System") +
facet_wrap(~CHANNEL, ncol=3, scales="free") +
geom_hline(yintercept = 2)
)
}
# LINEAR REGRESSIONS SYSTEMS
for (ch in channel.list[c(2,3,5,6)]) {
print(
knew.molten2 %>%
filter(UNITS == "density") %>%
filter(BRIGHTNESS == 'total') %>%
filter(VALENCE == 'SHOCK') %>%
filter(!(EXPT =='YOUNG' & CONTEXT=='AA' & VALENCE == 'SHOCK' & FREEZE < 30)) %>% # removes young bad freezers
filter(CHANNEL == ch) %>%
group_by(ID, System, GROUP, EXPT, CHANNEL, FREEZE, variable) %>%
summarize(weighted = weighted.mean(value, Pop_roiAreaMM2)) %>%
ggplot() + aes(FREEZE, weighted) +
stat_summary(fun.y="mean", geom="point") +
facet_wrap(EXPT~System, scales="free", ncol=16) + geom_smooth(method="lm") +
ggtitle(paste("Total brain density vs freezing, total cells, shock animals only,", ch)) +
theme_minimal()
)
}
# LINEAR REGRESSIONS SYSTEMS
for (ch in channel.list[c(2,3,5,6)]) {
print(
knew.molten2 %>%
filter(UNITS == "density") %>%
filter(BRIGHTNESS == 'total') %>%
filter(VALENCE == 'SHOCK') %>%
filter(!(EXPT =='YOUNG' & CONTEXT=='AA' & VALENCE == 'SHOCK' & FREEZE < 30)) %>% # removes young bad freezers
filter(CHANNEL == ch) %>%
group_by(ID, System, GROUP, EXPT, CHANNEL, FREEZE, variable) %>%
summarize(weighted = weighted.mean(value, Pop_roiAreaMM2)) %>%
ggplot() + aes(FREEZE, weighted) +
stat_summary(fun.y="mean", geom="point") +
facet_wrap(EXPT~System, scales="free", ncol=16) + geom_smooth(method="lm") +
ggtitle(paste("Total brain density vs freezing, total cells, shock animals only,", ch)) +
theme_minimal()
)
}
# GET THE STATS
sys.lr = knew.molten2 %>%
filter(UNITS == "density") %>%
filter(BRIGHTNESS == 'total') %>%
filter(VALENCE == 'SHOCK') %>%
# filter(!(EXPT =='YOUNG' & CONTEXT=='AA' & VALENCE == 'SHOCK' & FREEZE < 30)) %>% # removes young bad freezers
group_by(CHANNEL, EXPT, GROUP, ID, FREEZE, System) %>%
summarize(weighted = weighted.mean(value, Pop_roiAreaMM2)) %>%
group_by(CHANNEL, EXPT, System) %>%
do(tidy(lm(data=., formula = weighted ~ FREEZE))) %>%
filter(!term=="(Intercept)") %>%
mutate(p.value = p.adjust(p.value, method="BH", n=16)) %>%
mutate(sig =
case_when(
p.value < 0.0005 ~ "***",
p.value < 0.005 ~ "**",
p.value < 0.05 ~ "*"
))
# positive or negative
sys.lr %>%
filter(CHANNEL %in% c("H2BGFP","NormOL", "ArcIHC")) %>% # omit DAPI/OL/GFAP channels for clarity
# dcast(., CHANNEL+EXPT ~ System, value.var="sig") %>%
ggplot() + aes(EXPT, System, fill=estimate/abs(estimate), label=round(estimate,0)) + geom_tile() + facet_wrap(~CHANNEL) +
scale_fill_continuous(limits=c(-1,1), low="red", high="green", na.value="white") +
ggtitle("Slopes from linear regression (red is negative)") +
theme_light()
# P VALUES
sys.lr %>%
filter(CHANNEL %in% c("H2BGFP","NormOL", "ArcIHC")) %>% # omit DAPI/OL/GFAP channels for clarity
# dcast(., CHANNEL+EXPT ~ System, value.var="sig") %>%
ggplot() + aes(EXPT, System, fill=p.value, label=sig) + geom_tile() + facet_wrap(~CHANNEL) +
scale_fill_continuous(limits=c(0,0.05), low="dark red", high="white", na.value="white") +
ggtitle("Signifiance scores from linear regression (FDR corrected)") +
theme_light() + geom_label(label.size=0, color="white")
# LINEAR REGRESSIONS SYSTEMS
for (ch in channel.list[c(2,3,5,6)]) {
print(
knew.molten2 %>%
filter(UNITS == "density") %>%
filter(BRIGHTNESS == 'total') %>%
filter(VALENCE == 'SHOCK') %>%
filter(!(EXPT =='YOUNG' & CONTEXT=='AA' & VALENCE == 'SHOCK' & FREEZE < 30)) %>% # removes young bad freezers
filter(CHANNEL == ch) %>%
group_by(ID, System, GROUP, EXPT, CHANNEL, FREEZE, variable) %>%
summarize(weighted = weighted.mean(value, Pop_roiAreaMM2)) %>%
ggplot() + aes(FREEZE, weighted) +
stat_summary(fun.y="mean", geom="point") +
facet_wrap(EXPT~System, scales="free", ncol=16) + geom_smooth(method="lm") +
ggtitle(paste("Systems cell density vs freezing, shock animals only,", ch)) +
theme_minimal()
)
}
sys.lr2 = knew.molten2 %>%
filter(UNITS == "density") %>%
filter(BRIGHTNESS == 'total') %>%
filter(VALENCE == 'SHOCK') %>%
# filter(!(EXPT =='YOUNG' & CONTEXT=='AA' & VALENCE == 'SHOCK' & FREEZE < 30)) %>% # removes young bad freezers
group_by(CHANNEL, EXPT, GROUP, ID, FREEZE, System) %>%
summarize(weighted = weighted.mean(value, Pop_roiAreaMM2)) %>%
group_by(CHANNEL) %>%
do(tidy(lm(data=., weighted ~ FREEZE * EXPT))) %>%
filter(!term=="Residuals") %>%
# mutate(p.value = p.adjust(p.value, method="BH", n=16)) %>%
mutate(sig =
case_when(
p.value < 0.0005 ~ "***",
p.value < 0.005 ~ "**",
p.value < 0.05 ~ "*"
))
sys.lr2 %>%
filter(term=='FREEZE:EXPTYOUNG') %>%
ggplot() + aes(reorder(CHANNEL, p.value), -log10(p.value), fill=CHANNEL) +
geom_bar(stat="identity") + coord_flip() + theme_minimal() +
geom_hline(yintercept=2) +
ggtitle("(Activity ~ Freeze):AGE") +
xlab('channels')
knew.molten2 %>%
filter(UNITS == "density") %>%
filter(BRIGHTNESS == 'total') %>%
filter(VALENCE == 'SHOCK') %>%
filter(!CHANNEL=='DAPI') %>%
group_by(CHANNEL, EXPT, GROUP, ID, FREEZE, System) %>%
summarize(weighted = weighted.mean(value, Pop_roiAreaMM2)) %>%
ggplot() + aes(FREEZE, weighted, color=EXPT) +
# geom_point() +
geom_smooth(method="lm", fullrange=T, aes(group=EXPT)) +
facet_wrap(~CHANNEL, scales="free") + theme_minimal() +
ggtitle("Regressions of cell density vs. freezing") +
ylab("Activated cell densities")
# GET THE STATS
tot.lr = knew.molten2 %>%
filter(UNITS == "density") %>%
filter(BRIGHTNESS == 'total') %>%
filter(VALENCE == 'SHOCK') %>%
# filter(!(EXPT =='YOUNG' & CONTEXT=='AA' & VALENCE == 'SHOCK' & FREEZE < 30)) %>% # removes young bad freezers
group_by(CHANNEL, EXPT, GROUP, ID, FREEZE) %>%
summarize(weighted = weighted.mean(value, Pop_roiAreaMM2)) %>%
group_by(CHANNEL, EXPT) %>%
do(tidy(lm(data=., formula = weighted ~ FREEZE))) %>%
filter(!term=="(Intercept)") %>%
mutate(p.value = p.adjust(p.value, method="BH", n=6)) %>%
mutate(sig =
case_when(
p.value < 0.0005 ~ "***",
p.value < 0.005 ~ "**",
p.value < 0.05 ~ "*"
))
# positive or negative
tot.lr %>%
filter(CHANNEL %in% c("H2BGFP","NormOL", "ArcIHC")) %>% # omit DAPI/OL/GFAP channels for clarity
# dcast(., CHANNEL+EXPT ~ System, value.var="sig") %>%
ggplot() + aes(EXPT, CHANNEL, fill=estimate/abs(estimate), label=round(estimate,0)) + geom_tile() +
scale_fill_continuous(limits=c(-1,1), low="red", high="green", na.value="white") +
ggtitle("Slopes from linear regression (red is negative)") +
theme_light()
# P VALUES
tot.lr %>%
filter(CHANNEL %in% c("H2BGFP","NormOL", "ArcIHC")) %>% # omit DAPI/OL/GFAP channels for clarity
# dcast(., CHANNEL+EXPT ~ System, value.var="sig") %>%
ggplot() + aes(EXPT, CHANNEL, fill=p.value, label=sig) + geom_tile() +
scale_fill_continuous(limits=c(0,0.05), low="dark red", high="white", na.value="white") +
ggtitle("Signifiance scores from linear regression (Holm corrected)") +
theme_light() + geom_label(label.size=0, color="white")
print(
knew.molten2 %>%
filter(UNITS == "density") %>%
filter(BRIGHTNESS == bright) %>%
group_by(ID, GROUP, EXPT, CHANNEL, variable) %>%
summarize(weighted = weighted.mean(value, Pop_roiAreaMM2)) %>%
ggplot() + aes(GROUP, weighted, color=EXPT) +
stat_summary(fun.y = "mean", geom="point") +
stat_summary(fun.data = "mean_se", geom="errorbar", aes(width=0.3)) +
facet_wrap(~CHANNEL, scales="free", ncol=6) +
ggtitle(paste(c("Whole brain, weighted, density"),bright,"cells")) +
theme_minimal()
)
print(
knew.molten2 %>%
filter(UNITS == "density") %>%
filter(BRIGHTNESS == bright) %>%
group_by(ID, GROUP, EXPT, CHANNEL, variable) %>%
summarize(weighted = weighted.mean(value, Pop_roiAreaMM2)) %>%
ggplot() + aes(GROUP, weighted, color=EXPT) +
stat_summary(fun.y = "mean", geom="point") +
stat_summary(fun.data = "mean_se", geom="errorbar", aes(width=0.3)) +
facet_wrap(~CHANNEL, scales="free") +
ggtitle(paste(c("Whole brain, weighted, density"),bright,"cells")) +
theme_minimal()
)
print(
knew.molten2 %>%
filter(UNITS == "density") %>%
filter(BRIGHTNESS == bright) %>%
group_by(ID, GROUP, EXPT, CHANNEL, variable) %>%
summarize(weighted = weighted.mean(value, Pop_roiAreaMM2)) %>%
ggplot() + aes(GROUP, weighted, color=EXPT) +
stat_summary(fun.y = "mean", geom="point") +
stat_summary(fun.data = "mean_se", geom="errorbar", aes(width=0.3)) +
facet_wrap(~CHANNEL, scales="free") +
ggtitle(paste(c("Whole brain, weighted, density"),bright,"cells")) +
theme_minimal() +
ggtitle("Weighted mean cell density for whole brain")
)
knew.molten3 = knew.molten2 %>%
filter(UNITS == "density") %>%
filter(BRIGHTNESS == 'total')
val = sample(knew.molten3$value, 10000)
qqnorm(val, ylim=c(0,length(val)))
qqline(val, col="red")
library(MASS)
Box = boxcox((val+0.00001) ~ 1, seq(-6, 6, 0.1))
Cox = data.frame(Box$x, Box$y)
Cox2 = Cox[with(Cox, order(-Cox$Box.y)),] # reorder
Cox2[1,] # get greatest
lambda = Cox2[1, "Box.x"] # extract
lambda
val_box = (val ^ lambda - 1)/lambda # transform
qqnorm(val_box)
knew.molten3$value = (knew.molten3$value ^lambda -1) / lambda # transform
knew.molten3 %>%
group_by(ID, GROUP, EXPT, CHANNEL, variable) %>%
summarize(weighted = weighted.mean(value, Pop_roiAreaMM2)) %>%
ggplot() + aes(GROUP, weighted, color=EXPT) +
stat_summary(fun.y = "mean", geom="point") +
stat_summary(fun.data = "mean_se", geom="errorbar", aes(width=0.3)) +
facet_wrap(~CHANNEL, scales="free") +
ggtitle(paste(c("Whole brain, weighted, density after boxcox transform"),"TOTAL","cells")) +
theme_minimal()
shapiro.test(val)
dim(val)
sample(knew.molten3$value, 10000)
val = sample(knew.molten3$value, 5000)
shapiro.test(val)
val %>%
group_by(CHANNEL) %>%
do(tidy(shapiro.test()))
val %>%
group_by(CHANNEL) %>%
do(tidy(shapiro.test)
library(MASS)
val %>%
group_by(CHANNEL) %>%
do(tidy(shapiro.test))
val %>%
group_by(CHANNEL) %>%
summarize(shapiro.p = shapiro.test()$p.value)
val = sample(knew.molten3, 5000)
val = sample(knew.molten3, 5000)
?sample
val = dplyr::sample(knew.molten3, 5000)
paratest %>%
group_by(CHANNEL) %>%
shapiro.test(value)
paratest %>%
group_by(CHANNEL) %>%
do(tidy(shapiro.test(value)))
paratest %>%
group_by(CHANNEL)
paratest %>%
group_by(CHANNEL) %>%
do(tidy(shapiro.test(.$value)))
knew.molten3 %>%
group_by(ID, GROUP, EXPT, CHANNEL, variable) %>%
summarize(weighted = weighted.mean(value, Pop_roiAreaMM2))
total.weighted = knew.molten3 %>%
group_by(ID, GROUP, EXPT, CHANNEL, variable) %>%
summarize(weighted = weighted.mean(value, Pop_roiAreaMM2))
total.weighted %>%
group_by(CHANNEL) %>%
do(tidy(shapiro.test(.$value)))
total.weighted %>%
group_by(CHANNEL) %>%
do(tidy(shapiro.test(.$weighted.mean)))
total.weighted %>%
group_by(CHANNEL) %>%
do(tidy(shapiro.test(.$weighted)))
# total brain weighted means
total.weighted = knew.molten3 %>%
group_by(ID, GROUP, EXPT, CHANNEL, variable) %>%
summarize(weighted = weighted.mean(value, Pop_roiAreaMM2))
qqnorm(total.weighted, ylim=c(0,length(val)))
qqnorm(total.weighted, ylim=c(0,length(weighted)))
qqnorm(total.weighted, ylim=c(0,length(total.weighted$weighted)))
qqnorm(total.weighted$weighted, ylim=c(0,length(total.weighted$weighted)))
qqnorm(total.weighted$weighted)
qqline(total.weighted, col="red")
qqline(total.weighted$weighted, col="red")
qqline(total.weighted$weighted, col="red")
qqnorm(total.weighted$weighted) +
qqline(total.weighted$weighted, col="red")
?qqline
total.weighted %>%
group_by(CHANNEL) %>%
do(tidy(shapiro.test(.$weighted)))
library(MASS)
Box = boxcox((val+0.00001) ~ 1, seq(-6, 6, 0.1))
Box = boxcox((total.weighted$weighted+0.00001) ~ 1, seq(-6, 6, 0.1))
summary(total.weighted$weighted)
View(total.weighted)
summary(knew.molten3$Pop_roiAreaMM2)
?weighted.mean
summary(knew.molten3$value)
summary(knew.molten2$value)
knew.molten3$value %>% filter(value < 0)
knew.molten3 %>% filter(value < 0)
knew.molten %>% filter(value < 0)
a = knew.molten %>% filter(value < 0)
levels(a$CHANNEL)
a$CHANNEL
View(a)
a$ID
levels(a$ID)
unique(a$ID)
knew.molten3$value
summary(knew.molten3$value)
a = knew.molten3 %>% filter(value <0)
View(a)
source("LoadLibs.R")
source("LoadProcessZ1New.R") #outputs knew.molten (df)
attach(knew.molten)
# Merge more details
freeze_details = read.csv("freeze_details.csv")
group_details = read.csv("group_details.csv", header=T, encoding = "UTF-8-BOM")
names(group_details)[1] = "GROUP"
knew.molten2 = merge(knew.molten, freeze_details, by="ID")
knew.molten2 = merge(knew.molten2, group_details, by="GROUP")
# from now on I'm interested in densities and total
knew.molten3 = knew.molten2 %>%
filter(UNITS == "density") %>%
filter(BRIGHTNESS == 'total')
# uh why did I do this?
knew.molten2 = knew.molten2 %>% mutate(value = ifelse(value=='NaN', 0, value))
knew.molten3$value
summary(knew.molten3$value)
qqnorm(total.weighted$weighted)
# total brain weighted means
total.weighted = knew.molten3 %>%
group_by(ID, GROUP, EXPT, CHANNEL, variable) %>%
summarize(weighted = weighted.mean(value, Pop_roiAreaMM2))
qqnorm(total.weighted$weighted)
qqline(total.weighted$weighted, col="red")
# do the shapiro test PER CHANNEL for each TOTAL BRAIN
total.weighted %>%
group_by(CHANNEL) %>%
do(tidy(shapiro.test(.$weighted)))
for (bright in c('low', 'mid', 'hi', 'total')) {
print(
knew.molten3 %>%
group_by(ID, GROUP, EXPT, CHANNEL, variable) %>%
summarize(weighted = weighted.mean(value, Pop_roiAreaMM2)) %>%
ggplot() + aes(GROUP, weighted, color=EXPT) +
stat_summary(fun.y = "mean", geom="point") +
stat_summary(fun.data = "mean_se", geom="errorbar", aes(width=0.3)) +
facet_wrap(~CHANNEL, scales="free") +
ggtitle(paste(c("Whole brain, weighted, density"),bright,"cells")) +
theme_minimal() +
ggtitle("Weighted mean cell density for whole brain")
)
}
